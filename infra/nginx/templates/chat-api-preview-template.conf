server {
	listen 80;
  server_name __SERVER_NAME__;
  root /var/www/staging/gzcity-front-web/current;

  gzip_static on;
  gzip on;
  gzip_vary on;
  gzip_min_length 1k;
  gzip_proxied expired no-cache no-store private auth;
  gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml application/javascript;
  gzip_disable "MSIE [1-6]\.";

  location ~ \.(js|mjs|json|css|html)$ {
    gzip_static on;
  }

	access_log  /var/log/nginx/__SERVER_NAME__.access.log combined;
  error_log   /var/log/nginx/__SERVER_NAME__.error.log warn;

  # --- AUTH SUBREQUEST ---
  # Nginx will call this location *internally* before proxying to Node.
  location = /_auth {
      internal;
      proxy_pass         http://127.0.0.1:8091/authz;  # Spring endpoint
      proxy_pass_request_body off;                     # auth check doesn't need body
      proxy_set_header   Content-Length "";
      # Pass through request context Spring might need to verify:
      proxy_set_header   X-Original-Method $request_method;
      proxy_set_header   X-Original-URI    $request_uri;
      proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;
      proxy_set_header   X-Forwarded-Host  $host;
      proxy_set_header   X-Forwarded-Proto $scheme;
      # Forward cookies or Authorization so Spring can auth the user:
      proxy_set_header   Authorization     $http_authorization;
      proxy_set_header   Cookie            $http_cookie;
  }

  # Capture headers returned by Spring's /authz to reuse when proxying to Node:
  # (Spring should set these response headers on 200 OK)
  auth_request_set $member_code    $upstream_http_x_member_code;
  auth_request_set $team_code      $upstream_http_x_team_code;

  # java接口 测试环境
  location /beta-api/ {
      proxy_pass http://127.0.0.1:8091;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
      proxy_connect_timeout 7200s;
      proxy_read_timeout 7200s;
      proxy_send_timeout 7200s;
  }

  # --- PROTECTED API ENDPOINTS (guarded by auth) ---
  location /beta-api/chat/v2 {
      # 1) Ask Spring if this request is allowed:
      auth_request /_auth;

      # 2) Optionally customize error responses:
      error_page 401 = @unauthorized;
      error_page 403 = @forbidden;

      # 3) If allowed, proxy to backend with identity headers:
      proxy_pass http://127.0.0.1:__PORT__;

      # Inject identity/context headers for backend to trust
      proxy_set_header X-Member-Code     $member_code;
      proxy_set_header X-Team-Code       $team_code;

      # Standard proxy headers
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
      proxy_connect_timeout 7200s;
      proxy_read_timeout 7200s;
      proxy_send_timeout 7200s;
  }

  # Error page handlers
  location @unauthorized {
      return 401 '{"error": "Authentication required"}';
      add_header Content-Type application/json;
  }

  location @forbidden {
      return 403 '{"error": "Access forbidden"}';
      add_header Content-Type application/json;
  }

  error_page 404 /404.html;
  location = /404.html {
  }

  error_page 500 502 503 504 /50x.html;
  location = /50x.html {
  }
}
