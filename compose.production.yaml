services:
  chat-api:
    container_name: ${REPO_NAME}-production-api
    image: ${API_IMAGE}
    restart: unless-stopped
    env_file:
      - /etc/mymemo/chat-api/env.prod
    environment:
      - NODE_ENV=production
    ports:
      - "${HOST_PORT}:${CONTAINER_PORT}"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    mem_limit: 4g
    mem_reservation: 3g
    memswap_limit: 6g
    logging:
      driver: awslogs
      options:
        awslogs-region: us-west-2
        awslogs-group: /apps/chat-api
        awslogs-stream: ec2-${REPO_NAME}-production-api
        awslogs-create-group: "true"
    networks:
      - mymemo-production-network

  rag-api:
    container_name: ${REPO_NAME}-production-rag-api
    image: ${RAG_API_IMAGE}
    restart: unless-stopped
    env_file:
      - /etc/mymemo/rag-python/env.prod
    ports:
      - "${RAG_API_PORT}:8000"
    mem_limit: 2g
    mem_reservation: 1536m
    logging:
      driver: awslogs
      options:
        awslogs-region: us-west-2
        awslogs-group: /apps/rag-python
        awslogs-stream: ec2-${REPO_NAME}-production-api
        awslogs-create-group: "true"
    networks:
      - mymemo-production-network

  rag-worker:
    container_name: ${REPO_NAME}-production-rag-worker
    image: ${RAG_WORKER_IMAGE}
    restart: unless-stopped
    env_file:
      - /etc/mymemo/rag-python/env.prod
    mem_limit: 2g
    mem_reservation: 1536m
    logging:
      driver: awslogs
      options:
        awslogs-region: us-west-2
        awslogs-group: /apps/rag-python
        awslogs-stream: ec2-${REPO_NAME}-production-worker
        awslogs-create-group: "true"
    networks:
      - mymemo-production-network

networks:
  mymemo-production-network:
    driver: bridge

# To scale rag-worker locally, use: docker-compose up --scale rag-worker=N


