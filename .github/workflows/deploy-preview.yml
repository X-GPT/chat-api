name: Deploy Preview Environment

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]

  workflow_dispatch:
    inputs:
      pr_number:
        description: "PR number to deploy. Leave default for normal deployments."
        required: false
        default: ""
        type: string

concurrency:
  group: preview-deploy-${{ github.event.pull_request.number || github.event.inputs.pr_number }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write
  statuses: write

env:
  FORCE_COLOR: 1
  AWS_REGION: us-west-2
  ECR_REPO: ${{ github.event.repository.name }}
  EC2_HOST: ec2-52-35-68-202.us-west-2.compute.amazonaws.com
  EC2_USER: deploy
  EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
  CONTAINER_PORT: 3000
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    if: github.event.action != 'closed'
    outputs:
      registry: ${{ steps.ecr-login.outputs.registry }}
      image_sha_tag: ${{ steps.meta.outputs.image_sha_tag }}
      image_pr_tag: ${{ steps.meta.outputs.image_pr_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.3.1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Compute tags
        id: meta
        run: |
          REG="${{ steps.ecr-login.outputs.registry }}"
          REPO="${{ env.ECR_REPO }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"
          echo "image_sha_tag=${REG}/${REPO}:pr-${PR_NUMBER}-${GITHUB_SHA:0:7}" >> "$GITHUB_OUTPUT"
          echo "image_pr_tag=${REG}/${REPO}:pr-${PR_NUMBER}" >> "$GITHUB_OUTPUT"

      - name: Ensure ECR repository exists
        run: |
          set -euo pipefail
          REPO="${{ env.ECR_REPO }}"
          REGION="${{ env.AWS_REGION }}"
          if ! aws ecr describe-repositories --repository-names "$REPO" --region "$REGION" >/dev/null 2>&1; then
            echo "Creating ECR repository: $REPO in $REGION"
            aws ecr create-repository \
              --repository-name "$REPO" \
              --image-scanning-configuration scanOnPush=true \
              --encryption-configuration encryptionType=AES256 \
              --region "$REGION" >/dev/null
          fi

      # Build + push + cache
      - name: Build & Push image (with cache)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          # keep your tags
          tags: |
            ${{ steps.meta.outputs.image_sha_tag }}
            ${{ steps.meta.outputs.image_pr_tag }}
          # enable BuildKit cache persisted by GitHub Actions
          # tells BuildKit to use GitHub Actions cache storage.
          cache-from: type=registry,ref=${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO }}:build-cache
          cache-to: type=registry,ref=${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO }}:build-cache,mode=max

  deploy-preview:
    name: Deploy Preview Environment
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: build-and-push
    if: github.event.action != 'closed'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Copy preview scripts and template to EC2
        uses: appleboy/scp-action@v1
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.EC2_SSH_KEY }}
          port: 22
          source: "scripts/chat-api-preview-deploy.sh,scripts/chat-api-preview-destroy.sh,infra/nginx/templates/chat-api-preview-template.conf"
          target: "/tmp/chat-api/"

      - name: Deploy Preview on EC2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.EC2_SSH_KEY }}
          port: 22
          script: |
            set -euxo pipefail
            export FORCE_COLOR=1

            # Settings from workflow
            AWS_REGION="${{ env.AWS_REGION }}"
            CONTAINER_PORT="${{ env.CONTAINER_PORT }}"
            IMAGE="${{ needs.build-and-push.outputs.image_pr_tag }}"
            PR_NUMBER="${{ github.event.pull_request.number }}"
            BRANCH_SLUG="pr-$PR_NUMBER"
            REPO_SLUG="${{ github.event.repository.name }}"

            # Login to ECR
            REGISTRY="${IMAGE%%/*}"
            aws ecr get-login-password --region "$AWS_REGION" \
              | sudo docker login --username AWS --password-stdin "$REGISTRY"

            # Move scripts to /usr/local/bin and make them executable
            sudo -n mv /tmp/chat-api/scripts/chat-api-preview-deploy.sh /usr/local/bin/
            sudo -n mv /tmp/chat-api/scripts/chat-api-preview-destroy.sh /usr/local/bin/
            sudo -n chmod +x /usr/local/bin/chat-api-preview-deploy.sh
            sudo -n chmod +x /usr/local/bin/chat-api-preview-destroy.sh

            # Move template to nginx templates directory
            sudo -n mkdir -p /etc/nginx/templates/chat-api
            sudo -n mv /tmp/chat-api/infra/nginx/templates/chat-api-preview-template.conf /etc/nginx/templates/chat-api/

            # Ensure state directory structure exists
            sudo -n mkdir -p /var/preview

            # Deploy preview using the script
            chat-api-preview-deploy.sh "$BRANCH_SLUG" "$IMAGE" "$CONTAINER_PORT" "$REPO_SLUG"

      - name: Comment preview URL on PR
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          header: preview-url
          message: |
            ðŸš€ **Preview API is ready**

            PR: `pr-${{ github.event.pull_request.number }}`
            API URL: https://api-${{ github.event.repository.name }}-pr-${{ github.event.pull_request.number }}.preview.mymemo.ai

            You can test the API endpoints using this base URL.

      - name: Notify deployment success
        if: success()
        run: |
          PR_NUMBER="${{ github.event.pull_request.number }}"
          BRANCH_SLUG="pr-$PR_NUMBER"
          REPO_SLUG="${{ github.event.repository.name }}"

          echo "ðŸŽ‰ Preview deployment completed successfully!"
          echo "API URL: https://api-${REPO_SLUG}-${BRANCH_SLUG}.preview.mymemo.ai"

  destroy-preview:
    name: Destroy Preview Environment
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event.action == 'closed'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Copy preview-destroy script to EC2
        uses: appleboy/scp-action@v1
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.EC2_SSH_KEY }}
          port: 22
          source: "scripts/chat-api-preview-destroy.sh"
          target: "/tmp/chat-api/"

      - name: Destroy Preview on EC2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.EC2_SSH_KEY }}
          port: 22
          script: |
            set -euxo pipefail
            export FORCE_COLOR=1

            PR_NUMBER="${{ github.event.pull_request.number }}"
            BRANCH_SLUG="pr-$PR_NUMBER"
            REPO_SLUG="${{ github.event.repository.name }}"

            # Move script to /usr/local/bin and make it executable
            sudo -n mv /tmp/chat-api/scripts/chat-api-preview-destroy.sh /usr/local/bin/
            sudo -n chmod +x /usr/local/bin/chat-api-preview-destroy.sh

            # Destroy preview using the script
            chat-api-preview-destroy.sh "$BRANCH_SLUG" "$REPO_SLUG"
