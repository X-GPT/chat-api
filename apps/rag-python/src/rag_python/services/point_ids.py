"""Stable UUID generation helpers for Qdrant point IDs.

Stability contract:
Changing the namespace seed or the seed formatting logic will alter every ID
generated by these helpers. Treat modifications as data migrations that require
backfilling or coordination with existing Qdrant collections.
"""

import uuid
from typing import Final, Literal, get_args

# Bind a project-specific namespace derived from the URL namespace.
POINT_ID_NAMESPACE: Final = uuid.uuid5(uuid.NAMESPACE_URL, "mymemo/chat-api/qdrant-point-id")
# Allowed point types for runtime validation and type safety.
PointType = Literal["parent", "child"]
_VALID_POINT_TYPES: Final = set(get_args(PointType))


def generate_point_id(
    point_type: PointType,
    member_code: str,
    summary_id: int,
    extra: str = "",
) -> str:
    """Generate a deterministic UUID for a Qdrant point.

    Args:
        point_type: Logical point type (e.g., "parent", "child").
        member_code: Tenant identifier for isolation.
        summary_id: Summary identifier (int from upstream services).
        extra: Optional suffix to differentiate siblings (e.g., parent/child indices).

    Returns:
        UUID string suitable for Qdrant point IDs.
    """
    if point_type not in _VALID_POINT_TYPES:
        expected = ", ".join(sorted(_VALID_POINT_TYPES))
        raise ValueError(f"Unsupported point_type '{point_type}'. Expected one of: {expected}.")

    seed = f"{point_type}:{member_code}:{summary_id}:{extra}"
    return str(uuid.uuid5(POINT_ID_NAMESPACE, seed))


def parent_point_id(member_code: str, summary_id: int, parent_idx: int) -> str:
    """Point ID for parent (payload-only) chunks."""
    return generate_point_id("parent", member_code, summary_id, str(parent_idx))


def child_point_id(
    member_code: str,
    summary_id: int,
    parent_idx: int,
    chunk_idx: int,
) -> str:
    """Point ID for child vectors."""
    extra = f"{parent_idx}_{chunk_idx}"
    return generate_point_id("child", member_code, summary_id, extra)


# Backwards compatible alias (plan/code references chunk_point_id)
chunk_point_id = child_point_id
